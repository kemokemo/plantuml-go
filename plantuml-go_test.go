package main

import (
	"bytes"
	"fmt"
	"path/filepath"
	"testing"
)

const (
	pumlAlice = `@startuml
Bob -> Alice : hello
@enduml`
	encodedAlice = "UDfoA2v9B2efpStXSifFKj2rKt3CoKnELR1Io4ZDoSddSaZDIodDpG44003___W93C00"
	linkPngAclie = "http://plantuml.com/plantuml/png/UDfoA2v9B2efpStXSifFKj2rKt3CoKnELR1Io4ZDoSddSaZDIodDpG44003___W93C00"
)

var outputPngAlice = []byte("\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00x\x00\x00\x00~\b\x02\x00\x00\x00`_B\x98\x00\x00\x00)tEXtcopyleft\x00Generated by http://plantuml.com\x1109\x1c\x00\x00\x01\x06iTXtplantuml\x00\x01\x00\x00\x00x\x9c5\x8e\xcbn\x830\x10E\xf7\x96\xf2\x0f\xb3\x84\x05\x11\xa6M\x93xQ\xa5y\xb4U\x04jT\b\xdb\xca\xc0\x94Z\x02;2c\xd4\xfc}\x9d\xa0.瞫;g3\x90\xb4\xe4\xfanƶ\xa6\x82\xe8\x19^:U#\b\xf8\xc1\xae33\xb6A\xdd\xdc1;uR\xd39KaD;(\xa3\x81ϓ\x98\xaf\xe7\xfc!(\x1c\xc2\x1ek\xe01\xf0\xa5\xe0+\x91\xac\xe1\\\xec\xe0\xc6C\x16\xbc\x9dR\x18\x8c\xb3~\xb7Q\x03YU9\xf2\x03!;\xcaQ§Ӥz\x14p\xbb\x82\"\v!?\xfc\x87pУ\xb2F\xf7\xa8\x89\x1d\xcbl*\xc1\xbb\xa1\xfcb\xe8^~z\x8c\xb6\x8a G뽠̦\xd1rr\x14^r9\x8f\xbf\x92ET\xf1\x05\xfb\xb8\xa0\x95\xa4t\v\xf9u \xec\x05\xa4J\xbb_\xb6\xc7o\xe9:\xf2\xdfj\xd3x,\xbc\xfdk\xb4b\xa9ԭ\x93\xadwC\xcdv\xc6;٫g9\xfb\x03\x18faI\x0e\xb5I\xa0\x00\x00\a\x0fIDATx\xda\xed\x9d\u007fL\x94u\x1cǯ\x10/ƌQ\x8b\x98\x12#7\xa3\xb6\x1a\xa1E\xa6Ω\xab?\x9a\x11\xd1\xe2\x1fZƌј\xf3\x0f\xe7\x18Ț\xb2\x95F\vp\xb9Z\x16\x92\x9c$\xc2#qz\x992݅N\xbdM\nQs\xea\xb0B\x11T~8Ad \xa8\xf5Χ\x9e=]w\xcfs'\xf7\xdc\xf3\xbd\xe3\xfd\xd9wϾ\xcf\xf7y\xbew\xef{=\x9f\xe7\xf3\xfd~\x8f\xe7\xf8X\xfe\xa4\x05\xc5,D`&\xe8\xb1\xeb7z\x9a[\xcd-c\x03C\xba\xeaE\xd0\xe9\xa3fϠѧΒfn\xe9=ت\vZ\x04\x9d>j\xd6\x02}ncYOs]\xf0˹\x8a2\xbf@\x9b\xa5\xd3/\xcdZ\xa0\xd1\xff\xee\xdd\xe3\xc1/W\u007f\xaa\xf3\v\xb4Y:\xfd\xd2,.覊J\x97\xcb\xd5\xd6\xd6\xd6\xde\xde\xde\xdd\xdd=88(>h\r\xcdₖJ\xca\x1d\x0e\x87\xd3\xe9lii\x81\uefbe>\xf1Akh\x16\x17t͚\r\xb5\xb5\xb5v\xbb\x1d\xba\xe1#p\x10\xf1Akh\x16\x17\xf4\xb6\xa2\xf5\xd5\xd5\xd5\xd0\r\x1f\xc1\xfd\xd8\xd1\xd1!>h\r\xcd₮_W\x06\xd16\x9bM\x92$8\b\xeeD\xf1Akh&\xe8\xb0\x03m\xb1X\x04\x01\xad(\xf1]\x92\t\xa0-*\x8b\x8c\x9c\x12\x1f\xffh^\xde[==N1Ao\xdaT\x18\x1b\xfb0\xb6!\tZ\xbd\xdbݽ\u007f\xf5\xeaw\xe7\xce}NL\xd0ii\xcf\xee\xd8Q:g\xce3\xf7\xa7D \xd0r\xb1Z\xa7*\xf5\xcaʵ3g\u0380\xb3c\xbby\xf3\x87\xea\x8e84kV\"NNJ\x9an\xb3}d4\xe8ӧ\x1b\x16-zA\xc6}ꔤ\xedѻvmLM}\x1a\xb2\x13\x13㫪J\xd4\xed))OAs\\\xdc#\xc5\xc5\xef\x9b\x06\xfaҥ&x\xf4\x92%/ʻp\x1f\xa0\x94?\xd5\xf1\xe3;\xc0\xba\xa6\xe6c\xa5\xa3r\b[\xd4\x1b\x1b\xcb\r\x05]P\xf0^}\xfd\xa7\xa8\xe0z\xa3\xae\x01zϞM\xe0{\xf4h\xb5|\x8f._\x9e!\xb775}\x89\x9b\x15\x1f\x04\xf5+W\x0edd,Z\xbb6τ\x18-\xdb\xf4\xe9\x8f]\xbc\xb8O>\nY\xcd͕\xca\xc9N\xe7\xd7\xf0&\xa5\xa3\xfaСCU\v\x16<o\x1c\xe8۷\u007f\x81'b\x8b\xfa\x8d\x1bG\x12\x12\x1e\x97\xeb\x1eA/\\8{\xff\xfe\xaf\xfe\xff\"h?s\xa6Q\xd9\x1d\x188\x8c1\xc94\x8f\xce\xce~Mq\x01\xdcz\xca\xe7\x91?mT\x94U\xe9\xe8\xed\x90\x11\xa0\xf7\xee\xfdB\xed}99o\xc0m\xbd\x81v\x93\xad\x0e\x89J\xc198?\"\xe2A\xd3b\xf4\xe8\xe8\xb1\xe8\xe8(\xd1@ge\xbd\xeav\xe7ef.\xf6\x06\x1a\x1c=\x82\x06ֱ\xb1\x9fE\x19\fo\xdet)\x83!\x02\x85:>\xa0nJ\xe8\xb8v\xed\xe0\xb4i\xd1\xf0\x00\xa5\x05\xbcЂvo\xa1\x03\xe1\xd8c\xe8\xd0\x18\xb4\x83\n\x1a\xd1\x19\xa1cٲ\xd7\xe5\xdd\xed\xdb7`\x00<q\xa2\x1eul1\xbb@\x8bz0\x94\x0fa0LNN2n0\xc4\xc4Y\x89fJA\x8b<\xa1\xd6\x1e\f\x11\f\xf3\xf3\xb3\x941\x06A\xb9\xa1\xa1\f\xfe\x8er\xf8\xf0\xb7\xcam\x11\xd4\xc1\x10w\x16t\xacZ\xf5\x0e\x9c\xdamz\x87\xa3آ\xae\xee\x88\xd1\x1f\x8d腭\xa1\xd3;\xdcF\xb8c\xdc\x1a\xd1\"O\xa8=N\xefp\xd51xB\x9b\xdb\xf4\x0ep1\xa7\x92\xc34*\x1e\x1d\x9f\xdfu\xf0K%\x82&h\x82&h\x82&h\x82&h\x82&\xe8\xb0\x05}\xae\xa2\f\xfd\x83_\xe4\xe7\xd8|\am\x96N\xbf4\x8b\xfb4\xa9\xef\xa0\xc5)~\x83\x1e\x1b\x18\xea=\xd8*\x97\xa6\x8aJ\xa9\xa4\xbcf͆mE\xeb\xf1B\xc1+[\xb7\xe9\x82\x16B\xa7o\x9a\xf5\x9f\xf8w\xb9\\\x0e\x87\xa3\xb6\xb6\xb6\xda\f\xd3~RI\x1c\x9d\xba\x9a\xf5A\xb7\xb5\xb5\xe1\xe2\xd8\xedv\xf4\xb7\x05\xd7t\x9f\xbd\x13D\xa7/\x9a\xf5A\xc3\xff[ZZ\xd0\x13WI\n\xae\xe9>M*\x88N_4\xeb\x83\xc6eA\x1f\\\x1f\xdc\vN?m\xeb\ak\x9c\x130\xdd\xe7\xa3\x03\xa53 j\xb55\xeb\x83\xc6ٸ2膈\xd3\xee\xa7}\x1e9\xbb}\x02\x86w\xc4\xfb\xe2ݡatt\xd48\x9d\x01Q\xab\xad\xd9؟\xbfa\xc6\x13B\xbfP3T-A\x134A\xfbn\xbf\xae\xfb&\x84@\x1b\xaa\x96?Q\xe6o\xc1\t\x9aFГ\x154\aCN\xef8\x8f&h\x82&h\xae\f\xbd\f/\x16\x8b\u007f\ufadc\xefo\xc7ɾ2\x14\x13t\x18Σ\t\x9a\xa0\xc3\x0e\xf4\x96-[\x12\x13\x13###SSSO\x9e<\xa9\x1c*..\x8e\x8d\x8d\xb5Z\xad\xd9\xd9\xd9CCC\xde@\x8f\x8c\x8c\xe4\xe7\xe7G\xdf3T\xb0˕\xa1g\xd0\xe0\xd8\xdf\xdf\u007f\xe7Ν\xf2\xf2\xf2\xb4\xb4\u007f\x86\xfb\x92\x92\x92\x8c\x8c\f\xb4\x8f\x8f\x8f\xe7\xe6\xe6\xae\\\xb9\xd2\x1b肂\x02\x9c9x\xcf233\xb1˕\xa1gЊ\x0f\x825\xfcZ\xae'$$tvv\xca\xf5\xe1\xe1ᘘ\x18o\xa0\xe3\xe3\xe3/\\\xb8 \xd7Q\x89\x8b\x8b\xe3<Z?F\xab9\xfe\xf7W_\x11\xde@\xbb\xbd\x82r\xa9\b\xda'\xd0\xf0\xe8\xde\xde^_\x06Cx\xb4\xe2\xfb\xf4h\xbfA\x97\x96\x96\xa6\xa7\xa7wuu\xa1~\xfe\xfc\xf9\x9c\x9c\x1co\xa0\v\v\v\x11\x9a\x11\xa01`\"X\a$F\x87\xff\xcaP\xbd\v\xd6III\b\x1a)))\x92$i\xcc:0TZ\xefي\x15+nݺŕ\xa1\xc96|\xa9\xe7\xf7\xca]#W\xfa'\xe3<:\xc8vy\x9f\va\xa1!zaOs+A\x1bk\u007fT햟\x15ߝ\xb0\xf4\xecgߍ\xf6]'h\xa3\xac\xcb\xde\\\x1f\xf12X7ƾ\"Y\xe7\x1f\xc9,\b\xa6\x83O\xae\xbf\x19*\xac\xff\xfe\x87\xadS\xe65\xc6,Q;xh\xaf\f\x05/\xd2\xd4yr\xa5s\xa7\x93\u007fa\t\x98\xfd\xb6\xf9\xfb\xba\a^\x92\xc9:\x9eH\xdf=c\xe9\x0fO\xbey\xe6\x93j٣\t:\x90\x94\xa5\xa9\xf3\u007fL\xcej\x98\xb6\xf8\xe8\xdbEW\x0f\x1c\xbb;~;\x9cW\x86\xc1\xb7\xb3\xa56ّ\xd5.\x1c\xfe+CS\xe6\xd1;\x1fZ\xe0\xe6\xc2\\\x19\x06xe\x88y\xc5͎\xcb\\\x19N\n#h\x82&\xe8\xd0]\x19\x9a\xa8\x96\x8f\x84\x85\xc5\xf4\x8e\xa0\t\x9a\xa0\t\x9a\x83!\xa7w!;\xbdc*T\xa6B\x15N'S\xa12\x15*S\xa1\n\x05\x9a\xa9P\x99\n\x95\xa9P\x99\n\x95\xa9P\xf9\xdfv\xf9o\x8d\t\x9a\xa9P\x99\n\x95\xa9P\x99\nu\x82\xa0\x99\n\x95\xa9P\x99\n\x95\xa9P\xefϣ\x99\n\x95\xa9P\x99\n\x95\xa9P\xfd\x05\xcdT\xa8L\x85\xcaT\xa8\xfc\xae\x83\xa0\t\x9a\xa0\t\x9a\xa0\t\x9a\xa0\t\x9a\xa0\t\x9a\xa0\x99\n\x95\xa9P\x99\n\xf5\xdf玙\n\x95\xa9P\xc5\xd4\xc9T\xa8L\x85\xcaT\xa8n6\xf1\x14\xa3\xa1\x92\n\xd5P\xcdƦB5(\xad\xa8h:\xcdO\x85J#h\x82\x0eS\xfb\v'\xdd\xc6\xd9(+\x8eA\x00\x00\x00\x00IEND\xaeB`\x82")

func Test_getImageWithOneStream(t *testing.T) {
	type args struct {
		opt  option
		data []byte
	}
	tests := []struct {
		name    string
		args    args
		wantW   string
		wantErr bool
	}{
		{"text", args{option{"http://plantuml.com/plantuml", "png", styleTxt}, []byte(pumlAlice)}, fmt.Sprintln(encodedAlice), false},
		{"style", args{option{"http://plantuml.com/plantuml", "png", styleLink}, []byte(pumlAlice)}, fmt.Sprintln(linkPngAclie), false},
		{"output", args{option{"http://plantuml.com/plantuml", "png", styleOutput}, []byte(pumlAlice)}, string(outputPngAlice), false},
		{"unknown style", args{option{"http://plantuml.com/plantuml", "png", ""}, []byte(pumlAlice)}, "", true},
		{"invalid server", args{option{"", "png", styleOutput}, []byte(pumlAlice)}, "", true},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			w := &bytes.Buffer{}
			if err := getImageWithOneStream(tt.args.opt, tt.args.data, w); (err != nil) != tt.wantErr {
				t.Errorf("getImageWithOneStream() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if gotW := w.String(); gotW != tt.wantW {
				t.Errorf("getImageWithOneStream() = %v, want %v", gotW, tt.wantW)
			}
		})
	}
}

func Test_getImageWithFileList(t *testing.T) {
	type args struct {
		opt  option
		list []string
	}
	tests := []struct {
		name    string
		args    args
		wantErr bool
	}{
		{"valid file", args{option{"http://plantuml.com/plantuml", "png", styleTxt}, []string{filepath.Clean("./test-files/test.puml")}}, false},
		{"invalid file", args{option{"http://plantuml.com/plantuml", "png", styleTxt}, []string{filepath.Clean("./test-files/hoge.puml")}}, true},
		{"invalid server", args{option{"", "png", styleOutput}, []string{filepath.Clean("./test-files/test.puml")}}, true},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if err := getImageWithFileList(tt.args.opt, tt.args.list); (err != nil) != tt.wantErr {
				t.Errorf("getImageWithFileList() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}
